'use strict';

/**
 * @ngdoc function
 * @name ooniAPIApp.controller:MeasurementDetailViewCtrl
 * @description
 * # ReportDetailViewCtrl
 * Controller of the ooniAPIApp
 */

angular.module('ooniAPIApp')
  .controller('MeasurementDetailViewCtrl', function ($q, $scope, $anchorScroll, $rootScope, $location, Report, Nettest, Country, $routeParams, ISO3166) {

    $scope.measurementId = $routeParams.id;
    $scope.measurementInput = $routeParams.input;

    $rootScope.loaded = false;
    // XXX should use external pagination feature of ui grid
    // http://ui-grid.info/docs/#/tutorial/314_external_pagination
    $scope.pageNumber = 0;
    $scope.pageSize = 100;
    $scope.definitions = definitions;

    var query = {
      filter: {
        where: {
          'id': $scope.measurementId,
        },
        offset: $scope.pageNumber * $scope.pageSize,
        limit: $scope.pageSize
      }
    }

    function loading_success(data) {
      $scope.report = data[0];
      $scope.network_information = " ( " + $scope.report.probe_asn + " )"
      Report.asnName({asn: $scope.report.probe_asn}, function(result) {
        $scope.network_information = result[0].name + $scope.network_information;
      });

      $scope.nettest = Nettest.findOne({
        filter: {
          where: {
            name: $scope.report.test_name
          }
        }
      });

      $scope.countryName = ISO3166.getCountryName($scope.report.probe_cc);

      $rootScope.loaded = true;
    }

    function loading_failure() {
      console.log('failed')
      $rootScope.loaded = true;
      $scope.not_found = true;
    }

    if ($scope.measurementInput !== undefined) {
        query['filter']['where']['input'] = $scope.measurementInput;
        $scope.measurement = Report.find(query, loading_success, loading_failure);
    } else {
        $scope.measurements = Report.find(query, loading_success, loading_failure);
    }

});


var definitions = {
  options: {
    description: "A dictionary containing the keys and values of options passed to the test",
  },
  probe_asn: {
    description: "The AS Number of the probe (prefixed by AS, ex. AS1234) or null if includeasn is set to false.",
  },
  probe_cc: {
    description: "The two letter country code of the probe or null if inlcudecc is set to false.",
  },
  as_number: {
    external_url: "https://en.wikipedia.org/wiki/Autonomous_system_%28Internet%29"
  },
  probe_ip: {
    description: "The IPv4 address of the probe or null if includeip is set to false.",
  },
  software_name: {
    description: "The name of the software that has generated such report (ex. ooniprobe).",
  },
  software_version: {
    description: "The version of the software that has generated such report (ex. 0.0.10).",
  },
  start_time: {
    description: "The time at which the test was started in seconds since epoch.",
  },
  test_name: {
    description: "The name of the test that such report is for (ex. HTTP Requests).",
  },
  test_version: {
    description: "The version of the test that such report is for (ex. 0.0.10).",
  },
  data_format: {
    description: "The version string of the data format being used by the test (ex. httpt-000)",
  },
  report_id: {
    description: "A 64 character mixed case string that is generated by the client used to identify the report.",
  },
  test_helpers: {
    description: "A dictionary with as keys the names of the options and values the addresses of the test helpers used",
  },
  test_input: {
    description: "The specific input for this test"
  }
}

